<?xml version="1.0"?>
<implementation>
<functions>

-- ******************************************************
-- Window, Door, and Sensor HVAC Control (WDSC HVAC) plugin v1.2
-- Code originally by mcvflorin and posted to
-- http://forum.micasaverde.com/index.php/topic,4327.45.html
-- Packaged in plugin form by SOlivas, with modifications 
--
-- History:
-- 1.0 - Initial version released. 
--       mcvflorin's code with modifications to turn thermostats to specified modes (On or Off) during check if
--       door or window sensor is tripped.  Currently does not support internal motion sensors in this 
--       version.  May be added in a future release.
-- 1.1 - Implemented urn:upnp-org:serviceId:SwitchPower1 to make it easy to trigger scenes when OnMode and 
--       OffMode fire.  Also added icon in .json file.
-- 1.2 - Implemented temperature sensor support.  By defining temperature sensors, a high and low
--       limit and an action to do if each it reached or exceeded, you can control your HVAC system
--       based on climate conditions.  Direct Twilio Plugin support has been removed.
--		 Also standardized the values used to control the settings across all modes.
--
--
-- While I do not claim copyright for this plugin, I do feel that the following from the BSD license
-- is appropriate, since this is controlling your thermostat connected to your HVAC equipment and there 
-- is always possibility for things to not work in the way in which they were intended.
--
-- ** USE AT YOUR OWN RISK!!  IF YOUR HVAC EQUIPMENT MELTS DOWN, BREAKS, OR CATCHES FIRE/EXPLODES 
-- ** YOU HAVE BEEN WARNED!  
--
--THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED 
--WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A 
--PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
--ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
--TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) 
--HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING 
--NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE 
--POSSIBILITY OF SUCH DAMAGE.
--
-- Information:
--
-- ** Implements code from the following:
-- 
-- ** A modified version of the String 2 Lua code found at: 
-- **    http://www.gymbyl.com/programming/s2t.html
--
-- Plugin settings:
-- VerboseDebug will toggle the displaying of additional log messages for troubleshooting
-- 0 = Disabled (default)
-- 1 = Enabled
--
-- OnMode, OffMode, HTMode, LTMode can be one of the following:
-- 0  = Off (default for OffMode, 99 for rest)
-- 1  = HeatOn
-- 2  = CoolOn
-- 3  = Energy Savings Mode
-- 4  = Normal mode (turns off Energy Savings Mode)
-- 5  = AutoChangeOver
-- 6  = AuxHeatOn
-- 7  = EconomyHeatOn
-- 8  = EmergencyHeatOn
-- 9  = AuxCoolOn
-- 10 = EconomyCoolOn
-- 11 = BuildingProtection
-- 99 = Do nothing
--
-- PriorityMode defines if Window/Door or Temperature events have priority for controlling your HVAC
-- 0 = Window/Door (default)
-- 1 = Temperature (any)
-- 2 = High temperature 
-- 3 = Low temperature
--
--	EnergySavingsMode has the following options:
-- 0 = Use SwitchPower service only (default)
-- 1 = Use EnergySavingsMode operating mode only
--
-- ******************************************************

-- global declarations
local WDSC_PLUGIN_SID = "urn:wdsc-hvac-org:serviceId:WDSC_HVAC1"
local HVAC_SERVICE = "urn:upnp-org:serviceId:HVAC_UserOperatingMode1"
local SECURITY_SENSOR_SERVICE ="urn:micasaverde-com:serviceId:SecuritySensor1"
local SWITCH_SERVICE = "urn:upnp-org:serviceId:SwitchPower1"
local TEMPERATURE_SERVICE = "urn:upnp-org:serviceId:TemperatureSensor1"
local HA_DEVICE_SERVICE = "urn:micasaverde-com:serviceId:HaDevice1"

-- define tables
local wdSensorIdPair = {}
local thermostats = {}
local high_temp_sensors = {}
local low_temp_sensors = {}
local useHighTemp = 0
local useLowTemp = 0
local WDSC_DEVICE_ID = 0
local WDSCVerboseDebug = 0
local SafeMode = 1
 
-- Read/Write Variable constructor 
function Variable (device, service, variable, debug)
	return {
		get = function (x,y) 
				if (tonumber(debug) == 1) then
					WDSCLog("Variable.get: " .. variable .. " / y or x: " .. (y or x) ,2)
				end
				local var = luup.variable_get (service, variable, device)
					if (var == nil) then
						WDSCLog("Variable '" .. variable .. "' not defined, setting to '" .. (y or x) .. "'",2)
						var = y or x
						luup.variable_set (service, variable, var, device)
					end
				return var
				end;
		set = function (x,y) 
				if (tonumber(debug) == 1) then
					WDSCLog("Variable.set: " .. variable .. " / y or x: " .. (y or x) ,2)
				end
				local var = luup.variable_set (service, variable, y or x, device)
				return var
				end;
	}
end 

-- Log function
function WDSCLog(message, lvl)
   luup.log("WDSC HVAC- " .. message, lvl)
end
  
---
-- ****************************************
-- String 2 table functions
---
local function findAll(str,char)
	local t={}
	for i=1, #str do
		if str:sub(i, i)==char then
			t[#t+1]=i
		end
	end
	return t
end

local function removeChars(str,char)
	return str:gsub(char, "")
end

local function isNumeric(str) 
	return tonumber(str) and true or false 
end

local function getValue(str)
	local returnString=str
	if returnString=="true" then
		return true
	elseif returnString=="false" then
		return false
	elseif isNumeric(returnString) then
		return tonumber(returnString)
	else
		return returnString
	end
end

function stringToTable(str)
	local str=str
	str=removeChars(str, " ")
	
	local t={}	
	local stringValues={}
	local prevComma=1
	
	local commaTable=findAll(str, ",")
	
	for i=1, #commaTable+1 do
		stringValues[#stringValues+1]=str:sub(prevComma, commaTable[i])
		
		stringValues[#stringValues]=removeChars(stringValues[#stringValues], ",")
		stringValues[#stringValues]=removeChars(stringValues[#stringValues], "}")
		stringValues[#stringValues]=removeChars(stringValues[#stringValues], "{")
		stringValues[#stringValues]=removeChars(stringValues[#stringValues], "\t")
		stringValues[#stringValues]=removeChars(stringValues[#stringValues], "\n")
		stringValues[#stringValues]=removeChars(stringValues[#stringValues], "\"")
		
		prevComma=commaTable[i]
	end
	
	for i=1, #stringValues do
		if (WDSCVerboseDebug == "1") then
			WDSCLog("String2Table: stringValues[" .. i .. "] - " .. stringValues[i],2)
		end
		local equalSign, nilValue=string.find(stringValues[i], "=")
		nilValue=nil
		
		local leftSide=string.sub(stringValues[i], 1, equalSign-1)
		
		local rightSide=string.sub(stringValues[i], equalSign+1, #stringValues[i])
	
		if (WDSCVerboseDebug == "1") then
			WDSCLog("String2Table: leftSide - " .. leftSide,2)
			WDSCLog("String2Table: rightSide - " .. rightSide,2)
		end
		
		t[leftSide]=rightSide
	end
		
	return t
end
---
-- ****************************************
---

---
-- Temperature sensor check routines
---
local function WDSC_TempCheck(t, tFlg)
	local tSensorTripped = false

	if (WDSCVerboseDebug == "1") then
		WDSCLog("WDSC_TempCheck called...",2)
	end
	
-- If any sensor is tripped, set the global variable for tripped status.
	for k, v in pairs (t) do
		local curTemp = luup.variable_get (TEMPERATURE_SERVICE, "CurrentTemperature", tonumber(k))
		if (tFlg == 1) then
			-- High temp sensor check
			if (tonumber(curTemp) > tonumber(v)) then
				WDSCLog("High Temp Sensor on '" .. k .. "' is tripped! (" .. v .. ")",2)
				tSensorTripped = true
				break
			end
		else
			-- Low temp sensor check
			if (tonumber(curTemp) &lt; tonumber(v)) then
				WDSCLog("Low Temp Sensor on '" .. k .. "' is tripped! (" .. v .. ")",2)
				tSensorTripped = true
				break
			end
		end
	end
	return tSensorTripped
end

---
-- High temperature sensor check
--- 
local function WDSC_HighTempCheck()
	local trippedFlag = false
	if (WDSCVerboseDebug == "1") then
		WDSCLog("WDSC_HighTempCheck called...",2)
	end

	if (useHighTemp == 1) then
		trippedFlag = WDSC_TempCheck(high_temp_sensors, 1)
		if (trippedFlag == false) then
			WDSCLog("High Temperature Sensors not tripped...",50)
		end		
	end
	return trippedFlag
end

---
-- Low temperature sensor check
---
local function WDSC_LowTempCheck()
	local trippedFlag = false
	if (WDSCVerboseDebug == "1") then
		WDSCLog("WDSC_LowTempCheck called...",2)
	end

	if (useLowTemp == 1) then
		trippedFlag = WDSC_TempCheck(low_temp_sensors, 0)
		if (trippedFlag == false) then
			WDSCLog("Low Temperature Sensors not tripped...",50)
		end	
	end
	return trippedFlag
end

---
-- Tripped Sensor mode change routines
--
local function WDSC_ModeChange(NewMode)
	if (WDSCVerboseDebug == "1") then
		WDSCLog("WDSC_ModeChange called - NewMode=" .. NewMode,2)
	end

	local modeTmp = "Off"
	for k, v in pairs (thermostats) do
		if (NewMode == 1) then
			modeTmp = "HeatOn"
		elseif (NewMode == 2) then
			modeTmp = "CoolOn"
		elseif (NewMode == 5) then
			modeTmp = "AutoChangeOver"
		elseif (NewMode == 6) then	
			modeTmp = "AuxHeatOn"
		elseif (NewMode == 7) then	
			modeTmp = "EconomyHeatOn"
		elseif (NewMode == 8) then	
			modeTmp = "EmergencyHeatOn"
		elseif (NewMode == 9) then	
			modeTmp = "AuxCoolOn"
		elseif (NewMode == 10) then
			modeTmp = "EconomyCoolOn"
		elseif (NewMode == 11) then	
			modeTmp = "BuildingProtection"
		end
			
		if (NewMode == 3) then
			local TESavingsMode = tonumber(vTESavingsMode.get("0"))
			if (TESavingsMode == 0) then
				local status = luup.variable_get(SWITCH_SERVICE, "Status", tonumber(k)) or "0"
				if (status == "0") then
					WDSCLog("Thermostat " .. v .. " is already in Energy Savings Mode.  Skipping...",50)
				else
					WDSCLog("Switching Thermostat " .. v .. " to Energy Savings Mode.",50)
					luup.call_action(SWITCH_SERVICE,"SetTarget",{ newTargetValue="0" }, tonumber(k))
				end
			else
				local modeStatus = luup.variable_get("urn:upnp-org:serviceId:HVAC_UserOperatingMode1","ModeStatus",tonumber(k))
				if (modeStatus == "EnergySavingsMode") then 
					WDSCLog("Thermostat " .. v .. " is already in Energy Savings Mode.  Skipping...",50)
				else
					luup.call_action (HVAC_SERVICE, "SetModeTarget",  {NewModeTarget = "EnergySavingsMode"}, tonumber(k))
					luup.call_action (HVAC_SERVICE, "SetEnergyModeTarget", {NewModeTarget = "EnergySavingsMode"}, tonumber(k))
				end
			end	
		elseif (NewMode == 4) then
			local TESavingsMode = tonumber(vTESavingsMode.get("0"))
			if (TESavingsMode == 0) then
				local status = luup.variable_get(SWITCH_SERVICE, "Status", tonumber(k)) or "0"
				if (status == "1") then
					WDSCLog("Thermostat " .. v .. " is already in Normal Mode.  Skipping...",50)
				else
					WDSCLog("Switching Thermostat " .. v .. " to Normal Mode.",50)
					luup.call_action(SWITCH_SERVICE,"SetTarget",{ newTargetValue="1" }, tonumber(k))
				end
			else
				local modeStatus = luup.variable_get("urn:upnp-org:serviceId:HVAC_UserOperatingMode1","EnergyModeStatus",tonumber(k))
				if (modeStatus == "Normal") then
					WDSCLog("Thermostat " .. v .. " is already in Normal Mode.  Skipping...",50)
				else
					luup.call_action (HVAC_SERVICE, "SetEnergyModeTarget", {NewModeTarget = "Normal"}, tonumber(k))
				end
			end
		else
			if (NewMode ~=99) then
				local modeStatus = luup.variable_get("urn:upnp-org:serviceId:HVAC_UserOperatingMode1","ModeStatus",tonumber(k))
				if (modeTmp ~= modeStatus) then
					WDSCLog("Turning thermostat '" .. v .. "' to '" .. modeTmp .. "'.",50)
					luup.call_action (HVAC_SERVICE, "SetModeTarget",  {NewModeTarget = modeTmp}, tonumber(k))
				else
					WDSCLog("Thermostat '" .. v .. "' already set to '" .. modeTmp .. "'.  Skipping...",50)
				end
			else
				WDSCLog("NewMode = 99.  Doing nothing.",50)
			end
		end
	end
end
	
--- ****
-- Check if there are tripped sensors. If there are, then turn the thermostats to OffMode.
--- ****
function checkForTrippedSensors()	
	if (WDSCVerboseDebug == "1") then
		WDSCLog("checkForTrippedSensors called...",2)
	end

-- read variables
	local OffMode = vOffMode.get(99)
	local HTMode = tonumber(vHTMode.get("99"))
	local LTMode = tonumber(vLTMode.get("99"))
	local PriorityMode = tonumber(vPriorityMode.get("0"))
	local HmodeTmp = ""
	local LmodeTmp = ""
	
-- Assume that no sensors are still tripped.
    wdSensorTripped = false
	htSensorTripped = false
	ltSensorTripped = false
		
-- Check window and door sensors	
    for k, v in pairs(wdSensorIdPair) do
        local tripped = luup.variable_get (SECURITY_SENSOR_SERVICE, "Tripped", tonumber(k)) or "0"
        if (tripped == "0") then
            WDSCLog(v .. "' is not tripped.",50)
        else
            WDSCLog(v .. "' IS TRIPPED!",50)
            wdSensorTripped = true
            break
        end
    end

-- Check if High Temperature sensor has been tripped
	htSensorTripped = WDSC_HighTempCheck()

-- Check if Low Temperature sensor has been tripped
	ltSensorTripped = WDSC_LowTempCheck()

	WDSC_Interval = tonumber(vWDSC_Interval.get("300"))
	
-- Only run if the Refresh interval is not set to 0 -- keeps thermostat from being set to OffMode when
-- it may be controlled elsewhere	
    if ((wdSensorTripped or htSensorTripped or ltSensorTripped) and (WDSC_Interval ~=0)) then

-- Check Status, if 1 then change to 0	
		pStatus = tonumber(vPStatus.get("0"))
		if (pStatus == 1) then
			vPStatus.set(0)
			vSStatus.set(0)
			WDSCLog("Status is now 0 (Off)",2)
		else
			WDSCLog("Status already 0 (Off), skipping...",2)
		end

-- check to see if a single or multiple sensors were tripped
-- SafeMode keeps user from shooting self in foot if they forget change PriorityMode from default
		if ( SafeMode == 1 or ((wdSensorTripped and (htSensorTripped or ltSensorTripped)) or (htSensorTripped and (wdSensorTripped or ltSensorTriped)))) then

-- multiple sensors are tripped -		
-- logic to see who wins and calls WDSC_ModeChange(OffMode/HTMode/LTMode)
			if (PriorityMode == 1) then	
				if (htSensorTripped or ltSensorTripped) then
					WDSCLog("Any Temperature Sensor (high then low) takes priority",2)
					if (htSensorTripped) then
						WDSCLog("Using HTMode",2)
						WDSC_ModeChange(HTMode)
					else
						WDSCLog("Using LTMode",2)
						WDSC_ModeChange(LTMode)
					end
				else
					WDSCLog("No Temperature	Sensor tripped -- using Window/Door Sensor OffMode.",2)
					WDSC_ModeChange(OffMode)
				end
			elseif (PriorityMode == 2) then
				if (ltSensorTripped or htSensorTripped) then
					WDSCLog("Any Temperature Sensor (low then high) takes priority",2)
					if (ltSensorTripped) then
						WDSCLog("Using LTMode",2)
						WDSC_ModeChange(LTMode)
					else
						WDSCLog("Using HTMode",2)
						WDSC_ModeChange(HTMode)
					end
				else
					WDSCLog("No Temperature Sensor tripped -- using Window/Door Sensor OffMode.",2)
					WDSC_ModeChange(OffMode)			
				end
			elseif (PriorityMode == 3) then
				if (ltSensorTripped) then
					WDSCLog("Low Temperature Sensor only mode",2)
					WDSC_ModeChange(LTMode)
				else
					WDSCLog("Low Temperature Sensor not tripped -- using Window/Door Sensor OffMode.",2)
					WDSC_ModeChange(OffMode)
				end
			elseif (PriorityMode == 4) then
				if (htSensorTripped) then
					WDSCLog("High Temperature Sensor only mode",2)
					WDSC_ModeChange(HTMode)
				else	
					WDSCLog("High Temperature Sensor not tripped -- using Window/Door Sensor OffMode.",2)
					WDSC_ModeChange(OffMode)
				end
			else
			-- Default to 0 - Window/Door sensor takes priority
				WDSCLog("Window/Door Sensors take priority",2)
				WDSC_ModeChange(OffMode)
			end

		else
		
-- only one sensor is tripped, check to see which and change to mode 
			if (htSensorTripped) then
				WDSCLog("Only High Temperature Sensor Tripped -- setting HTMode.",2)
				WDSC_ModeChange(HTMode)
				elseif (ltSensorTripped) then
				WDSCLog("Only Low Temperature Sensor Tripped -- setting LTMode.",2)
				WDSC_ModeChange(LTMode)
			else
				WDSCLog("Only Door/Window Sensor Tripped -- setting OffMode.",2)
				WDSC_ModeChange(OffMode)
			end
		end
	end
		
-- only restart the timer if the Refresh interval is not 0
	if (WDSC_Interval ~=0) then
		restartTimer()
	end
end

--- ****
-- Main check function
--- ****
function WDSC_Poll()
-- Assume that no sensors are tripped.
	local wdSensorTripped = false
	local htSensorTripped = false
	local ltSensorTripped = false
	
	if (WDSCVerboseDebug == "1") then
		WDSCLog("WDSC_Poll called...",2)
	end
	
-- If any sensor is tripped, set the global variable for tripped status.
	for k, v in pairs (wdSensorIdPair) do
		local tripped = luup.variable_get (SECURITY_SENSOR_SERVICE, "Tripped", tonumber(k)) or "0"
		if (tripped == "0") then
			WDSCLog("Sensor '" .. v .. "' is not tripped.",50)
		else
			WDSCLog("Sensor '" .. v .. "' IS TRIPPED!",50)
			wdSensorTripped = true
			break
		end
	end

-- Check if High Temperature sensor has been tripped
	htSensorTripped = WDSC_HighTempCheck()

-- Check if Low Temperature sensor has been tripped
	ltSensorTripped = WDSC_LowTempCheck()
	
-- Set Thermostat back to mode defined "OnMode" if no sensors are tripped (default="Off")
	if ((wdSensorTripped or htSensorTripped or ltSensorTripped)) then
		WDSCLog("Sensor was tripped, skipping...",50)
	else
		WDSC_Interval = tonumber(vWDSC_Interval.get("300"))

-- Check Status, if 0 then change to 1
		pStatus = tonumber(vPStatus.get("0"))
		if (pStatus == 0) then
			vPStatus.set(1)
			vSStatus.set(1)
			WDSCLog("Status is now 1 (On)",2)
		else
			WDSCLog("Status already 1 (On), skipping...",2)			
		end

-- Only run if the Refresh interval is not set to 0 -- keeps thermostat from being set to OnMode when
-- it may be controlled elsewhere

		if (WDSC_Interval ~=0) then
			OnMode = tonumber(vOnMode.get("5"))	
			WDSC_ModeChange(OnMode)
		end
		
	end

-- If there was any tripped sensor, check again in 1 minute if there still are tripped sensors.
	if (WDSC_Interval ~=0) then
		if ((wdSensorTripped or htSensorTripped or ltSensorTripped)) then
			luup.call_delay ("checkForTrippedSensors", 60, "")
		else
			restartTimer()
		end
	end
end

---
-- Force Polling of sensors to control HVAC
---
function ForcedPoll(lul_device)
	WDSCLog("*** WARNING! User called ForcePoll - manually polling sensors and controlling HVAC ***",2)
	WDSC_Poll()
end	

---
-- Restart timer for checks
---
function restartTimer()
	-- check the default poll period and resubmit using
	-- the value set in Refresh or default it to 300 seconds (5 minutes)

	if (WDSCVerboseDebug == "1") then
		WDSCLog("restartTimer called...",2)
	end
	  
	WDSC_Interval = tonumber(vWDSC_Interval.get("300"))
  
	-- if not 0, but less than 300 or more than 86400, reset to 300 (default)
    if (WDSC_Interval == nil or (WDSC_Interval ~= 0 and WDSC_Interval &lt; 300) or WDSC_Interval > 86400) then
        WDSC_Interval = "300"
		vWDSC_Interval.set(WDSC_Interval)
    end

	WDSCLog("Refresh interval: " .. WDSC_Interval,50)

	-- 0 = disable automatic refresh
    if (WDSC_Interval ~=0) then
        luup.call_timer("WDSC_Poll", 1, tostring(WDSC_Interval).."s", "")
    end
end

---
-- Reset/Restart Polling Delay
---
function WDSC_Restart(lul_device, delay)
    WDSC_Interval = tonumber(delay)

	if (WDSCVerboseDebug == "1") then
		WDSCLog("WDSC_Restart called...",2)
	end
	
	-- if not 0, but less than 300 or more than 86400, reset to 300 (default)
    if (WDSC_Interval == nil or (WDSC_Interval ~= 0 and WDSC_Interval &lt; 300) or WDSC_Interval > 86400) then
        WDSC_Interval = "300"
		vWDSC_Interval.set(WDSC_Interval)
    end

	WDSCLog("Refresh interval: " .. WDSC_Interval,50)

	-- 0 = disable automatic refresh
    if (WDSC_Interval ~=0) then
        luup.call_timer("WDSC_Poll", 1, tostring(WDSC_Interval).."s", "")
    end
end

-- *************************************	
-- Initialize plugin
-- *************************************
function WDSC_startup(WDSC_device)
	local tempVar = 0	

	-- save device id in global variable for re-use
    WDSC_DEVICE_ID = WDSC_device    
	
	vDebug = Variable(WDSC_DEVICE_ID, WDSC_PLUGIN_SID, "VerboseDebug", 0)
	WDSCVerboseDebug = vDebug.get(0)

	if (WDSCVerboseDebug == "1") then
		WDSCLog("Verbose Debugging:  On",2)
	else
		WDSCLog("Verbose Debugging:  Off",2)
	end
	
-- initialize variables
	vSensors = Variable(WDSC_DEVICE_ID, WDSC_PLUGIN_SID, "Sensors", WDSCVerboseDebug)
	vTStats = Variable(WDSC_DEVICE_ID, WDSC_PLUGIN_SID, "Thermostats", WDSCVerboseDebug)	
	vWDSC_Interval = Variable(WDSC_DEVICE_ID, WDSC_PLUGIN_SID, "Refresh", WDSCVerboseDebug)
	vHTSensors = Variable(WDSC_DEVICE_ID, WDSC_PLUGIN_SID, "HighTempSensors", WDSCVerboseDebug)
	vLTSensors = Variable(WDSC_DEVICE_ID, WDSC_PLUGIN_SID, "LowTempSensors", WDSCVerboseDebug)
	vPStatus = Variable(WDSC_DEVICE_ID, WDSC_PLUGIN_SID, "Status", WDSCVerboseDebug)
	vSStatus = Variable(WDSC_DEVICE_ID, SWITCH_SERVICE, "Status", WDSCVerboseDebug)
	vOnMode = Variable(WDSC_DEVICE_ID, WDSC_PLUGIN_SID, "OnMode", WDSCVerboseDebug)
	vHTMode = Variable(WDSC_DEVICE_ID, WDSC_PLUGIN_SID, "HighTempMode", WDSCVerboseDebug)
	vLTMode = Variable(WDSC_DEVICE_ID, WDSC_PLUGIN_SID, "LowTempMode", WDSCVerboseDebug)
	vOffMode = Variable(WDSC_DEVICE_ID, WDSC_PLUGIN_SID, "OffMode", WDSCVerboseDebug)
	vPriorityMode = Variable(WDSC_DEVICE_ID, WDSC_PLUGIN_SID, "PriorityMode", WDSCVerboseDebug)
	vCheckAtStart = Variable(WDSC_DEVICE_ID, WDSC_PLUGIN_SID, "StartupCheck", WDSCVerboseDebug)
	vTESavingsMode = Variable(WDSC_DEVICE_ID, WDSC_PLUGIN_SID, "EnergySavingsMode", WDSCVerboseDebug)
	vSafeMode = Variable(WDSC_DEVICE_ID, WDSC_PLUGIN_SID, "SafeMode", WDSCVerboseDebug)
	
	local tempVar = vWDSC_Interval.get("300")
	local Sensors = " " .. vSensors.get("*undefined*")
	local TStats = " " .. vTStats.get("*undefined*")
	local HTSensors = " " .. vHTSensors.get("*undefined*")
	local LTSensors = " " .. vLTSensors.get("*undefined*")
	local OnMode = vOnMode.get("99")	
	local HTMode = vHTMode.get("99")
	local LTMode = vLTMode.get("99")
	local OffMode = vOffMode.get("99")
	local PriorityMode = vPriorityMode.get("0")	
	local CheckAtStart = vCheckAtStart.get("0")
	local TESavingsMode = tonumber(vTESavingsMode.get("0"))
	SafeMode = tonumber(vSafeMode.get("1"))
	
-- Check to see if this is the first time the plugin has been run, of if it isn't configured
-- correctly	
	if (Sensors == " *undefined*") then
		WDSCLog("No Input Sensors Specified",1)
		luup.task('Set the Sensors variable to use',2,'WDSC HVAC Control',-1)
		return false
	end

	if (TStats == " *undefined*") then
		WDSCLog("No Thermostats Specified",1)
		luup.task('Set the Thermostats variable to use',2,'WDSC HVAC Control',-1)
		return false
	end
	
	WDSCLog("Configured devices:")
	WDSCLog("Sensors variable: " .. Sensors,2)
	WDSCLog("Thermostats variable: " .. TStats,2)
	
	-- store Sensors in wdSensorIdPair table	
	wdSensorIdPair=stringToTable(Sensors)
	
	-- store TStats in thermostats table 
	thermostats=stringToTable(TStats)
	
	-- enumerate both tables, displaying contents to log for debugging	
	for k, v in pairs (wdSensorIdPair) do
		WDSCLog("Sensor ID: " .. k .. " - " .. v,2)
	end
	
	for k, v in pairs (thermostats) do
		WDSCLog("Thermostat ID: " .. k .. " - " .. v,2)
	end

-- Check to see if HighTempSensors are defined
	if (HTSensors == " *undefined*") then
		WDSCLog("No High Temperature Sensors Specified - High Temp check disabled",2)
	else
		WDSCLog("HighTempSensors variable: " .. HTSensors,2)
		useHighTemp = 1
		high_temp_sensors = stringToTable(HTSensors)
	end
	
-- Check to see if LowTempSensors are defined	
	if (LTSensors == " *undefined*") then
		WDSCLog("No Low Temperature Sensors Specified - Low Temp check disabled",2)
	else
		WDSCLog("LowTempSensors variable: " .. LTSensors,2)
		useLowTemp = 1
		low_temp_sensors=stringToTable(LTSensors)
	end	
	
	-- enumerate high and low temp sensor tables, displaying contents to log for debugging
	if (useHighTemp) then
		for k, v in pairs (high_temp_sensors) do
			WDSCLog("High Temp Sensor ID: " .. k .. " / Trigger value: " .. v,2)
		end
	end
	
	if (useLowTemp) then
		for k, v in pairs (low_temp_sensors) do
			WDSCLog("Low Temp Sensor ID: " .. k .. " / Trigger value: " .. v,2)
		end
	end	
		
	if (TESavingsMode == 0) then
		WDSCLog("EnergySavingsMode:  Using PowerSwitch service",2)
	else
		WDSCLog("EnergySavingsMode:  Using EnergySavingsMode operating mode",2)
	end

-- Has SafeMode been defined?
	if (SafeMode == 1) then
		WDSCLog("*** SafeMode on ***",2)
	end
	
-- Clear CommFailure flag
	luup.variable_set (HA_DEVICE_SERVICE, "CommFailure", "0", WDSC_DEVICE_ID)
	
-- start delay timer
	if (CheckAtStart == "1") then
		WDSCLog("Check at start enabled.",2)
		WDSC_Poll()
	else
		restartTimer()
	end
	
end

</functions>
<incoming>
	<lua>

    </lua>
</incoming>
<startup>WDSC_startup</startup>
<actionList>
	<action>
		<serviceId>urn:wdsc-hvac-org:serviceId:WDSC_HVAC1</serviceId>
		<name>RestartPolling</name>
		<run>
			WDSC_Restart(lul_device, lul_settings.delay)
		</run>
	</action>
	<action>
		<serviceId>urn:wdsc-hvac-org:serviceId:WDSC_HVAC1</serviceId>
		<name>ForcePoll</name>
		<run>
			ForcedPoll(lul_device)
		</run>
	</action>
</actionList>
</implementation>
